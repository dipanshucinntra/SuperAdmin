"""
Django settings for SuperAdmin project.

Generated by 'django-admin startproject' using Django 4.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
from datetime import timedelta
import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-$!00xk3sfqi@v_cdobni!r82rg$b@uw_lw%a1vh93j3&4e3%cg'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework.authtoken',
    'rest_framework', 
    'corsheaders',
    'Applications',
    'Users',
    'Customers',
    'Industries',
    'Payments',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'SuperAdmin.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'SuperAdmin.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.environ.get('DATABASR_ENGINE'),  
        'NAME': os.environ.get('DATABASE_NAME'),  
        'USER': os.environ.get('DATABASE_USER'),  
        'PASSWORD': os.environ.get('DATABASE_PASSWORD'),  
        'HOST': os.environ.get('DATABASE_HOST'),  
        'PORT': os.environ.get('DATABASE_PORT'),
    }
}


AUTH_USER_MODEL ="Users.User"

#Authentication backends
AUTHENTICATION_BACKENDS = (    
    'django.contrib.auth.backends.ModelBackend',
)

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ]
}

CORS_ALLOW_ALL_ORIGINS = True
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000",  # Replace with the origin of your frontend
    
# ]
# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



def PAGE(json_data):
    arr={}
    try:
        if str(json_data['maxItem']).lower()=="all":
            endWith=None
            startWith=0
            arr['startWith'] = startWith
            arr['endWith'] = endWith
            return arr
        else:
            PageNo = json_data['PageNo']
            try:
                MaxItem = int(json_data['maxItem'])
            except:
                MaxItem = 10
            endWith = (PageNo * MaxItem)
            startWith = (endWith - MaxItem)

            arr['startWith'] = startWith
            arr['endWith'] = endWith
            return arr
    except Exception as e:
        print(str(e))
        return str(e)

def BYFIELD(argument, val, objs, table):
    if argument == "FromDate" and table in ["lead"]:
        return objs.filter(date__gte=val)
    elif argument == "ToDate" and table in ["lead"]:
        return objs.filter(date__lte=val)
    elif argument == "Source" and table in ["lead"]:
        return objs.filter(source=val)
    elif argument == "Status" and table in ["lead"]:
        return objs.filter(status=val)    
    elif argument == "FromDate" and table in ["quotation", "order", "invoice"]:
        return objs.filter(CreationDate__gte=val)
    elif argument == "ToDate" and table in ["quotation", "order", "invoice"]:
        return objs.filter(CreationDate__lte=val)
    elif argument == "CardCode" and table in ["order", "invoice", "businesspartner"]:
        return objs.filter(CardCode=val)
    elif argument == "CardName" and table in ["order", "invoice", "businesspartner"]:
        return objs.filter(CardName=val)
    elif argument == "CardType" and table in ["businesspartner"]:
        return objs.filter(CardType=val)
    elif argument == "DocEntry" and table in ["quotation", "order", "invoice"]:
        return objs.filter(DocEntry=val)
    elif argument == "FinalStatus" and table in ["quotation","order"]:
        return objs.filter(FinalStatus=val)
    else:
        return objs

def FILTER(json_data, objs, table):
    keys = {}
    for key in json_data:
        if json_data[key]!="":
            objs = BYFIELD(key, json_data[key], objs, table)
    return objs